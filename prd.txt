Document de Sp√©cifications Fonctionnelles (PRD)

Application Flutter pour la gestion des num√©ros de s√©rie (SN) avec Odoo 15

1. Introduction & Objectifs

L‚Äôobjectif de ce projet est de d√©velopper une application mobile Flutter connect√©e √† Odoo 15 via une API REST, permettant de scanner les num√©ros de s√©rie (SN) des produits lors des op√©rations de r√©ception (Stock IN) et livraison (Stock OUT).

Les objectifs principaux sont :

Acc√©l√©rer la saisie des SN via scan (code-barres ou QR code).

Garantir la tra√ßabilit√© des produits dans Odoo.

Fonctionner hors ligne avec synchronisation ult√©rieure.

V√©rifier les doublons de SN pour Stock IN et l‚Äôexistence des SN pour Stock OUT.

2. Contexte & Probl√©matique

Actuellement, la saisie des SN se fait manuellement dans Odoo, ce qui est long et source d‚Äôerreurs.

L‚Äôobjectif est d‚Äôoffrir une solution mobile rapide, fiable et compatible avec Odoo.

3. Description G√©n√©rale de l‚ÄôApplication

Technologie : Flutter (derni√®re version stable : Flutter 3.x)

Compatibilit√© : Android & iOS

Base locale : SQLite pour stockage temporaire

Connexion API : REST API bas√©e sur Odoo 15

Fonctionnalit√©s principales :

‚úî Connexion & Synchronisation avec Odoo
‚úî S√©lection du type d‚Äôop√©ration (Stock IN / Stock OUT)
‚úî Affichage des listes de transferts (non re√ßus / non livr√©s)
‚úî S√©lection d‚Äôun picking ‚Üí liste des produits
‚úî Scan SN + Saisie emplacement
‚úî V√©rification doublons (IN) & existence (OUT)
‚úî Sauvegarde locale + Synchronisation manuelle

4. Architecture Technique
Front-End (Flutter)

Flutter 3.x

State management : Provider ou Riverpod

SQLite via sqflite

Scan : barcode_scan2 ou flutter_barcode_scanner

Back-End (Odoo 15)

API REST bas√©e sur Odoo Controller

Authentification : token ou session Odoo

Routes s√©curis√©es par ACL (Access Control List)

5. Parcours Utilisateur (User Flow)
√âtapes principales :

√âcran Connexion ‚Üí Authentification via API Odoo

√âcran Synchronisation ‚Üí Bouton ‚ÄúSync‚Äù pour charger les donn√©es pickings

√âcran Menu Principal ‚Üí 2 options :

Stock IN (R√©ceptions)

Stock OUT (Livraisons)

S√©lection d‚Äôun Picking ‚Üí Liste des transferts disponibles

Liste Produits ‚Üí Choisir un produit

Scan SN + Placement

V√©rifier doublon SN (IN)

V√©rifier existence SN (OUT)

Enregistrer en local SQLite

Synchronisation vers Odoo ‚Üí Envoi via API

6. Exigences Fonctionnelles
6.1. Connexion & Sync

Authentification avec identifiants Odoo (login + mot de passe).

Stockage du token dans Secure Storage.

Bouton Sync ‚Üí r√©cup√®re pickings IN & OUT non termin√©s.

6.2. Stock IN

Affichage liste des pickings type incoming.

S√©lection d‚Äôun picking ‚Üí afficher produits.

Scan SN + saisie emplacement (manuel).

V√©rifier SN d√©j√† scann√© (local) ‚Üí message ‚ÄúDoublon‚Äù.

Stocker en local (SQLite).

6.3. Stock OUT

Affichage liste des pickings type outgoing.

S√©lection d‚Äôun picking ‚Üí afficher produits.

Scan SN ‚Üí v√©rifier via API Odoo si SN existe.

Si SN inexistant ‚Üí erreur ‚ÄúSN introuvable‚Äù.

6.4. Synchronisation

Bouton Envoyer vers Odoo ‚Üí POST vers API.

Mise √† jour du picking dans Odoo (move_line_ids avec SN + emplacement).

7. Exigences Non Fonctionnelles

Performance : Synchronisation < 3 sec par 50 SN.

S√©curit√© : HTTPS obligatoire + token s√©curis√©.

Compatibilit√© : Android 8+ & iOS 13+.

Mode Offline : Fonctionnalit√© offline avec sync diff√©r√©e.

8. Wireframes (Structure √âcrans)

üìå √âcrans principaux :

Login (Email, Mot de passe, Bouton Connexion)

Dashboard (Bouton Sync + Ic√¥nes Stock IN / Stock OUT)

Liste des Pickings

Liste Produits

√âcran Scan SN + Champ Emplacement + Liste scann√©e

√âcran Synchronisation (statut)

(Je peux dessiner les wireframes si tu veux ‚úÖ)

9. Sch√©ma BDD Locale (SQLite)
Tables :

Table pickings

id (int)

picking_id (Odoo ID)

type (IN/OUT)

status (draft, done)

Table products

id (int)

product_id (Odoo ID)

picking_id (FK)

name (text)

Table scanned_sn

id (int)

product_id (FK)

serial_number (text)

location (text)

synced (bool)

10. Sp√©cifications API Odoo 15
10.1. Authentification

POST /api/auth/login
Body : { "login": "user", "password": "pass" }
R√©ponse : { "token": "abcd1234" }

10.2. R√©cup√©ration des Pickings

GET /api/pickings?type=in/out&status=pending
R√©ponse :

[
  {
    "id": 45,
    "name": "WH/IN/00045",
    "products": [
      { "id": 12, "name": "Produit A", "qty": 10 }
    ]
  }
]

10.3. V√©rification SN (Stock OUT)

GET /api/serial/check?sn=XYZ123
R√©ponse : { "exists": true }

10.4. Envoi des SN scann√©s

POST /api/pickings/{id}/update_sn
Body :

{
  "lines": [
    { "product_id": 12, "sn": "XYZ123", "location": "A1" }
  ]
}


R√©ponse : { "success": true }

11. Cas d‚ÄôUtilisation (User Stories)

En tant qu‚Äôutilisateur, je peux me connecter √† Odoo via l‚Äôapp pour acc√©der aux donn√©es de stock.

En tant qu‚Äôutilisateur, je peux scanner les SN sans connexion Internet et synchroniser plus tard.

En tant qu‚Äôutilisateur, je veux √™tre alert√© si un SN est doublon (Stock IN) ou inexistant (Stock OUT).

12. Risques & Contraintes

D√©pendance √† la connexion r√©seau pour synchronisation.

Compatibilit√© avec lecteurs de codes-barres externes.

Volume important de SN ‚Üí optimisation SQLite.